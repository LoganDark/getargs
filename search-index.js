var searchIndex = JSON.parse('{\
"getargs":{"doc":"An argument parser that is truly zero-cost, similar to Unix…","t":[4,8,13,4,3,13,13,4,3,13,3,13,6,13,13,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12],"n":["Arg","Argument","DoesNotRequireValue","Error","IntoPositionals","Long","Long","Opt","Options","Positional","Positionals","RequiresValue","Result","Short","Short","ShortOpt","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","consume_short_opt","consume_short_val","ends_opts","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into_iter","into_iter","into_positionals","is_empty","ne","ne","ne","new","next","next","next_arg","next_opt","next_positional","opt","opts_ended","parse_long_opt","parse_short_cluster","positional","positionals","reset_opts_ended","restart","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","value_opt","0","0","0","0","0","0","0"],"q":["getargs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","getargs::Arg","","","getargs::Error","","getargs::Opt",""],"d":["An option or positional argument.","The argument trait for types that can be parsed by <code>Options</code>.","The option does not require a value, but one was supplied.","An argument parsing error.","An iterator over what used to be the positional arguments …","A long option, like <code>--file</code>. Does not include the leading <code>--</code>…","A long option, like <code>--file</code>. Does not include the leading <code>--</code>…","A short or long option.","An argument parser.","A positional argument, like <code>foo.txt</code>.","An iterator over the positional arguments of an <code>Options</code>.","The option requires a value, but one was not supplied.","","A short option, like <code>-f</code>. Does not include the leading <code>-</code>.","A short option, like <code>-f</code>. Does not include the leading <code>-</code>.","The short-flag type. For <code>&amp;str</code>, this is <code>char</code>. For <code>&amp;[u8]</code>, …","","","","","","","","","","","","","","","","","","","","","","","Attempts to consume one short option from a “short option","Consumes the value of a short option from a “short …","Returns <code>true</code> if this argument signals that no additional …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Consumes this <code>Options</code>, returning an iterator over the rest …","Returns <code>true</code> if this <code>Options</code> has reached the end of its …","","","","Creates a new <code>Options</code> given an iterator over arguments of …","","","Retrieves the next <em>argument</em>. An <em>argument</em> is represented by …","Retrieves the next option.","Retrieves the next positional argument. This method must be","Retrieves an equivalent <code>Opt</code> represented by this <code>Arg</code>, if it …","Returns <code>true</code> if the last call to <code>Options::next_opt</code> …","Attempts to parse this argument as a long option. Returns …","Attempts to parse this argument as a “short option …","Returns the positional <code>Argument</code> represented by this <code>Arg</code>, …","Returns an iterator over the positional arguments of this …","Resets <code>Options::opts_ended</code>, causing it to start returning …","“Restarts” options parsing if the iterator has been …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Retrieves the value passed to the option last returned by …","Retrieves an <em>optional</em> value for the option last returned by","","","","","","",""],"i":[0,0,1,0,0,2,3,0,0,2,0,1,0,2,3,4,2,1,5,6,3,7,2,1,5,6,3,7,2,1,6,3,7,2,1,6,3,7,4,4,4,2,1,3,2,2,1,1,5,6,3,3,7,2,2,2,2,1,5,6,3,7,3,2,1,5,6,3,7,5,6,7,7,2,1,3,7,5,6,7,7,7,2,7,4,4,2,7,7,7,2,1,6,3,7,2,1,3,2,1,5,6,3,3,7,2,1,5,6,3,7,2,1,5,6,3,7,7,7,8,9,10,11,12,13,14],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["arg",4,[["",26,[["clone",8],["argument",8]]]]]],["arg",4,[["",26,[["clone",8],["argument",8]]]]]],[[["error",4,[["",26,[["clone",8],["argument",8]]]]]],["error",4,[["",26,[["clone",8],["argument",8]]]]]],[[["intopositionals",3,[["",26,[["clone",8],["argument",8]]],["",26,[["clone",8],["iterator",8]]]]]],["intopositionals",3,[["",26,[["clone",8],["argument",8]]],["",26,[["clone",8],["iterator",8]]]]]],[[["opt",4,[["",26,[["clone",8],["argument",8]]]]]],["opt",4,[["",26,[["clone",8],["argument",8]]]]]],[[["options",3,[["",26,[["clone",8],["argument",8]]],["",26,[["clone",8],["iterator",8]]]]]],["options",3,[["",26,[["clone",8],["argument",8]]],["",26,[["clone",8],["iterator",8]]]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[],["bool",0]],[[["arg",4,[["",26,[["partialeq",8],["argument",8]]]]],["arg",4]],["bool",0]],[[["error",4,[["",26,[["partialeq",8],["argument",8]]]]],["error",4]],["bool",0]],[[["opt",4,[["",26,[["partialeq",8],["argument",8]]]]],["opt",4]],["bool",0]],[[["arg",4,[["",26,[["debug",8],["argument",8]]]]],["formatter",3]],["result",6]],[[["arg",4,[["",26,[["argument",8],["display",8]]]]],["formatter",3]],["result",6]],[[["error",4,[["",26,[["argument",8],["display",8]]]]],["formatter",3]],["result",6]],[[["error",4,[["",26,[["debug",8],["argument",8]]]]],["formatter",3]],["result",6]],[[["positionals",3,[["",26,[["debug",8],["argument",8]]],["",26,[["debug",8],["iterator",8]]]]],["formatter",3]],["result",6]],[[["intopositionals",3,[["",26,[["debug",8],["argument",8]]],["",26,[["debug",8],["iterator",8]]]]],["formatter",3]],["result",6]],[[["opt",4,[["",26,[["argument",8],["display",8]]]]],["formatter",3]],["result",6]],[[["opt",4,[["",26,[["debug",8],["argument",8]]]]],["formatter",3]],["result",6]],[[["options",3,[["",26,[["debug",8],["argument",8]]],["",26,[["debug",8],["iterator",8]]]]],["formatter",3]],["result",6]],[[["argument",8]],["arg",4,[["argument",8]]]],[[["opt",4,[["argument",8]]]],["arg",4,[["argument",8]]]],[[["never",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["opt",4,[["",26,[["hash",8],["argument",8]]]]],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["options",3,[["argument",8],["iterator",8]]]],["intopositionals",3,[["argument",8],["iterator",8]]]],[[["options",3,[["argument",8],["iterator",8]]]],["bool",0]],[[["arg",4,[["",26,[["partialeq",8],["argument",8]]]]],["arg",4]],["bool",0]],[[["error",4,[["",26,[["partialeq",8],["argument",8]]]]],["error",4]],["bool",0]],[[["opt",4,[["",26,[["partialeq",8],["argument",8]]]]],["opt",4]],["bool",0]],[[["iterator",8]],["options",3,[["argument",8],["iterator",8]]]],[[["positionals",3,[["argument",8],["iterator",8]]]],["option",4]],[[["intopositionals",3,[["argument",8],["iterator",8]]]],["option",4]],[[["options",3,[["argument",8],["iterator",8]]]],["result",6,[["argument",8],["option",4,[["arg",4,[["argument",8]]]]]]]],[[["options",3,[["argument",8],["iterator",8]]]],["result",6,[["argument",8],["option",4,[["opt",4,[["argument",8]]]]]]]],[[["options",3,[["argument",8],["iterator",8]]]],["option",4,[["argument",8]]]],[[["arg",4,[["argument",8]]]],["option",4,[["opt",4,[["argument",8]]]]]],[[["options",3,[["argument",8],["iterator",8]]]],["bool",0]],[[],["option",4]],[[],["option",4]],[[["arg",4,[["argument",8]]]],["option",4,[["argument",8]]]],[[["options",3,[["argument",8],["iterator",8]]]],["positionals",3,[["argument",8],["iterator",8]]]],[[["options",3,[["argument",8],["iterator",8]]]]],[[["options",3,[["argument",8],["iterator",8]]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["arg",4,[["argument",8]]]],["result",4,[["opt",4,[["argument",8]]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["options",3,[["argument",8],["iterator",8]]]],["result",6,[["argument",8],["argument",8]]]],[[["options",3,[["argument",8],["iterator",8]]]],["option",4,[["argument",8]]]],null,null,null,null,null,null,null],"p":[[4,"Error"],[4,"Arg"],[4,"Opt"],[8,"Argument"],[3,"Positionals"],[3,"IntoPositionals"],[3,"Options"],[13,"Short"],[13,"Long"],[13,"Positional"],[13,"RequiresValue"],[13,"DoesNotRequireValue"],[13,"Short"],[13,"Long"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
